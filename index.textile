---
layout: page
title: Redu para desenvolvedores
tagline: "Documentação da API REST do Redu"
---
{% include JB/setup %}

h2. Introdução

O "Redu":http://www.redu.com.br é uma plataforma de ensino a distância construida sobre uma rede social. O seu objetivo principal é potencializar o talento das pessoas oferecendo ferramentas que proporcionam uma aprendizagem mais efetiva.

Através da API HTTP REST do "Redu":http://www.redu.com.br é possível construir aplicações que acessam os dados dos "usuários":resources/user.html e "cursos":resources/course.html da plataforma.

h3. Hypertext enabled

Seguindo a "sugestão":http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven do "Roy Fielding":http://en.wikipedia.org/wiki/Roy_Fielding, pai do REST, todos os recursos retornados pela API do Redu possuem metainformações (hyperlinks) para outros recursos importantes no estado atual da aplicação. Isso faz com que a API possua um único ponto de entrada, por exemplo o AVA.

Exemplificando o dito acima, ao realizar uma requisição HTTP com o método GET para a URL @/api/environments/foo@ o recurso retornado seria como o descrito abaixo:

<pre>
{
  name: "Foo",
  created_at: "2010-12-17T16:37:40-02:00",
  initials: "bar",
  path: "foo",
  links: [
    { href: "http://127.0.0.1:3000/api/environments/foo", rel: "self" },
    { href: "http://127.0.0.1:3000/api/environments/foo/courses", rel: "courses" }
    { href: "http://127.0.0.1:3000/api/environments/foo/users", rel: "users" }
  ]
}
</pre>

Note que o JSON retornado possui uma propriedade links que denota as URLs que a aplicação cliente precisa conhecer no contexto atual (visualização de curso). Isso quer dizer que, por exemplo, quisessemos visualizar os cursos do AVA em questão, poderíamos faze-lo sem conhecer a priori a URL apropriada.

Uma aplicação cliente em JavaScript + jQuery poderia listar os cursos deste ambiente da seguinte forma:

{% highlight javascript %}
$(document).ready(function(){
  $.getJSON('/api/environments', { id : 'foo' }, function(data){
      var links = data['links'];
      var courses;
      for(var i = 0; i < data['links'].length; i++) {
        if(links[i]['rel'] === 'courses') { courses = links['href']; break; }
      }

      $.getJSON(courses, function(data){
        console.log(data)
      });
  });
});
{% endhighlight %}


h2. Autenticação

_TODO_

h2. Como os dados do "Redu":http://www.redu.com.br estão organizados?

!assets/images/entities.png!
!assets/images/hierarchy.001.png!

h2. Aplicação de exemplo

Para melhor exemplificar como a API do Redu pode ser usada, foi criado uma "aplicação de exemplo":https://github.com/redu/qt-example em "Python":http://python.org/. Nesta aplicação foi utilizado todos os métodos descritos para AVA, Usuário, Matrícula, Disciplina e Curso, de forma que, todos os dados foram extraídos da API do Redu.

Simulamos um sistema Desktop com as seguintes descrições: Coligados, Cursos, Disciplinas e Turmas.

h4. Mapeamento

table(table table-bordered table-striped).
|_.API Redu|_.API Exemplo|
|Environments|Coligados|
|Courses|Cursos|
|Spaces|Disciplinas|
|Environments|Turmas|

h4. Tela da Aplicação de Exemplo


!assets/images/Window_qt_example.png!




