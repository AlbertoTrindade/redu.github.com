---
layout: page
title: Redu para desenvolvedores
tagline: "Documentação da API REST do Redu"
---
{% include JB/setup %}

h2. Introdução

O "Redu":http://www.redu.com.br é uma plataforma de ensino a distância construida sobre uma rede social. O seu objetivo principal é potencializar o talento das pessoas oferecendo ferramentas que proporcionam uma aprendizagem mais efetiva.

Através da API HTTP REST do "Redu":http://www.redu.com.br é possível construir aplicações que acessam os dados dos "usuários":resources/user.html e "cursos":resources/course.html da plataforma.

h3. Hypertext enabled

Seguindo a "sugestão":http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven do "Roy Fielding":http://en.wikipedia.org/wiki/Roy_Fielding, pai do REST, todos os recursos retornados pela API do Redu possuem metainformações (hyperlinks) para outros recursos importantes no estado atual da aplicação. Isso faz com que a API possua um único ponto de entrada, por exemplo o AVA.

Exemplificando o dito acima, ao realizar uma requisição HTTP com o método GET para a URL @/api/environments/foo@ o recurso retornado seria como o descrito abaixo:

<pre>
{
  name: "Foo",
  created_at: "2010-12-17T16:37:40-02:00",
  initials: "bar",
  path: "foo",
  links: [
    { href: "http://redu.com.br/api/environments/foo", rel: "self" },
    { href: "http://redu.com.br/api/environments/foo/courses", rel: "courses" }
    { href: "http://redu.com.br/api/environments/foo/users", rel: "users" }
  ]
}
</pre>

Note que o JSON retornado possui uma propriedade links que denota as URLs que a aplicação cliente precisa conhecer no contexto atual (visualização de curso). Isso quer dizer que, por exemplo, quisessemos visualizar os cursos do AVA em questão, poderíamos faze-lo sem conhecer a priori a URL apropriada.

Uma aplicação cliente em JavaScript + jQuery poderia listar os cursos deste ambiente da seguinte forma:

{% highlight javascript %}
$(document).ready(function(){
  $.getJSON('/api/environments', { id : 'foo' }, function(data){
      var links = data['links'];
      var courses;
      for(var i = 0; i < data['links'].length; i++) {
        if(links[i]['rel'] === 'courses') { courses = links['href']; break; }
      }

      $.getJSON(courses, function(data){
        console.log(data)
      });
  });
});
{% endhighlight %}


h2. Autenticação

h3. OAuth

p. O Redu utiliza o protocolo "OAuth":http://oauth.net para autenticação de applicações externas à sua API. O OAuth um protocolo para autenticação de clientes em WebServices, utilizado por grande parte dos serviços web (Twitter, Facebook, Foursquare etc)

p. Para conhecer o protocolo uma ótima referência é o "tutorial da hueniverse":http://hueniverse.com/oauth/guide

h4. Fluxo de Requisições para Autenticação

p. Esse é um fluxo básico do processo de autenticação utilizando OAuth, lembrando que normalmente você utilizará bibliotecas que realizam todo este processo

!assets/images/oauth-workflow.png!

h3. Bibliotecas

p. Já existem bibliotecas prontas que implementam o protocolo OAuth em diversas linguagens, você pode encontrar algumas delas no "repositório oficial":http://code.google.com/p/oauth

p. Além disso diversos Frameworks de desenvolvimento também possuem implementações próprias, como o "Zend Framework":http://framework.zend.com/manual/en/zend.oauth.html

h3. Exemplos

p. Alguns exemplos de clientes realizando a negociação dos tokens e fazendo requisições para a API do Redu

1. "Python":https://github.com/redu/oauth-consumers/tree/master/python-native
2. "PHP":https://gist.github.com/2161583
3. "Ruby":https://github.com/redu/oauth-consumers/tree/master/ruby-native
4. "Rails":https://github.com/redu/oauth-consumers/tree/master/rails-server
5. "Java":https://github.com/redu/oauth-consumers/tree/master/java-native

h2. Como os dados do "Redu":http://www.redu.com.br estão organizados?

!assets/images/hierarchy.001.png!

h2. Aplicação tipo canvas em JavaScript

p. Aplicações tipo canvas são um tipo especial de aplicativos que são executados dentro da interface gráfica do Redu. Para o usuário final estes aplicativos fazem parte da plataforma, por isso é importante que estes ofereçam uma experiência uniforme.

div(thumbnail){width: 400px; float: left; margin: 10px 20px 20px 0;}. !assets/images/canvas-example.png!

p. Uma vez que estes aplicativos são integrados a interface do Redu, existem alguma limitações a respeito das dimensões do mesmo. Atualmente é possível inserir aplicações de até @720px@ de largura.

p. Em relação a altura só é necessária que ela seja fixa, ou seja, que se mantenha a mesma durante desde o momento em que ela é carregada.

p. Aplicativos tipo canvas precisam estar acessíveis através da internet. Ou seja, precisam estar hospedados em servidores terceiros.

p. O canvas propriamente dito é um @<iframe>@ que tem como fonte um endereço em outro servidor. Este modelo já é bem estabelecido e utilizado em outras plataformas de aplicativos, como o Facebook.

h3{clear: left;}. Autenticação via JavaScript

p. O Redu implementa o "fluxo implícito":http://tools.ietf.org/html/draft-ietf-oauth-v2-26#section-1.3.2 do OAuth. Este fluxo é autenticar aplicações com código público, como as que são feitas em JavaScript e funcionam dentro do browser. Dessa forma é possível realizar a autenticação sem necessáriamente possuir lógica server-side.

p. A aplicação "palavras":http://github.com/redu/canvas-example realiza implementa esse tipo de autenticação. Para tornar isso possível foi utilizada a biblioteca JavaScript "JSO":https://github.com/andreassolberg/jso .

h2. Aplicação de exemplo em Python

p. Para melhor exemplificar como a API do Redu pode ser usada, foi criado uma "aplicação de exemplo":https://github.com/redu/qt-example em "Python":http://python.org/. Nesta aplicação foram utilizado todos os recursos descritos para AVA, Usuário, Matrícula, Disciplina e Curso.

A aplicação é um sistema Desktop com as seguintes funcionalidades:

1. Listagem e cadastro de Coligados
2. Listagem e cadastro de cursos de um coligado
3. Listagem e cadastro Disciplinas e Turmas.
4. Matrícula

Parte do desafio na construção desta aplicação foi realizar o mapeamento dos recursos disponibilizados através da API com as entidades especifícas do domínio da aplicação. Abaixo são exemplificados o mapeamento realizado.

table(table table-bordered table-striped).
|_.API Redu|_.API Exemplo|
|Environments|Coligados|
|Courses|Cursos|
|Spaces|Disciplinas|
|Environments|Turmas|

